北理工的学弟学妹们你们好，欢迎你们查看这份火炬。我们的软件代码风格规范，逻辑思维谨密，可拓展性强。
希望你们通过查看我们的成果，少走一些弯路，快速地了解小学期软件设计所需要的知识，不用到CSDN上面众
里寻他千百度而茫然无果，现在我给你们概述一下你们在开始coding之前需要准备好的背景知识。一个团队中
的成员如果都只想着独善其身，那么这个团队很难有什么大的作为，因此，通信软件的开发必然是分模块合作
的。我们将整个软件的开发分成了4个模块，模块与模块间相互调用而互不干涉，他们分别是UI模块，通信客户
端模块，通信服务器模块，数据库模块。UI模块需要准备好gtk的相关知识，整个通信模块用到的是socket的
相关知识，数据库则需要熟悉MySQL的使用。
##服务器部分说明
我们的服务器是一款消息处理型的服务器，它不会主动向客户端发送任何消息，只是在收到消息后将其处理，
并发送给接受者，其中，消息有普通消息和命令两种格式，我们制定了一套通信协议来规范收发的内容。命令
都以'/'开头，以'*'结束，其中可以添加一些参数，举例说明
请求登录 /0,username:name;password:123;*
同意登录 /0:1*
拒绝登录 /0:-1*
发送消息 to_who:msg
收到消息 from_who:msg
##客户端部分说明

客户端在与服务器端建立socket连接后，主要任务是应UI模块的需要向服务器发送对应请求，然后接收返回的
信息并反馈给界面。

举个例子，用户在注册的时候会在登录界面上点击signin的button，UI模块会调用signin函数，传递用户名和
密码的参数，signin函数体内打包成"/0*username:%s;password:%s;"的格式send给服务器端，服务器端处理
后返回正确或错误信息。又比如，在登陆成功后界面会转到聊天窗口，此时UI模块需要拉取好友列表，会调用cl
-ient的load_friends_list_from_server(char *friendname)函数,向服务器端发送“/2：username”,服务器
端收到命令以后会从服务器获取好友列表并发送给客户端。类似的功能同理可以实现，不再赘述。

关于接收部分，在log in以后，为了防止进程阻塞，我们在client.c单独开了一个子线程用于接收消息和命令
（具体的命令协议参照另一份文档）
pthread_create(&pthid, NULL, (void *)recving, NULL);
void *recving (void *p_null);
函数recving是接收线程的具体内容，需要根据命令协议解析出命令和消息并反馈给界面（调用对应UI模块的函数，
将接收到的信息以参数形式传递给用户界面）。

北京理工大学 肖子原 许达
2017.09.09  于中关村
更多信息，欢迎联系 xiaoziyuan@bit.edu.cn
